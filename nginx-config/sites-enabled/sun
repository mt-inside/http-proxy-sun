# SEE JOEL fb mesage plex.warwick.film config
#
server {
        # Listen on both http and httpS. No auto-upgrade, as there are some
        # legitimate uses for non-TLS (e.g. plex streaming). TLS isn't the
        # be-all and end-all of security; this couldn't be exposed to the
        # internet anyway, TLS or not, as there's no HTTP auth over
        # sensitive information
        listen 80;
        listen [::]:80 ipv6only=on;
        listen 443 ssl http2 default_server;
        listen [::]:443 ipv6only=on ssl http2 default_server;

        # This isn't just the name returned, it's the vhost i.e. host header match
        # Note that server_names_hash_bucket_size has been increased
        server_name sun sun.empty.org.uk;


        # TLS Certs
        include /etc/nginx/options-ssl-nginx.conf;
        # Fetched by certbot before nginx starts
        ssl_certificate /etc/letsencrypt/live/sun.empty.org.uk/fullchain.pem; # all certs including end-entity
        ssl_certificate_key /etc/letsencrypt/live/sun.empty.org.uk/privkey.pem; # private key
        # for OCSP stapling
        ssl_trusted_certificate /etc/letsencrypt/live/sun.empty.org.uk/chain.pem; # chain, minus end-entity


        # No password protection (auth_basic etc). It's just too much
        # effort for e.g. Plex that does a bunch of dynamic loading.
        # DO NOT EXPOSE THIS TO THE INTERNET!


        location / {
                root /usr/share/nginx/html;
                index index.html index.htm;

                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }


        include /etc/nginx/locations-enabled/plex;


        location /httpbin/ {
                include proxy_params;
                proxy_pass http://httpbin:8000/;
        }

        location /prometheus/ {
                include proxy_params;
                proxy_pass http://prometheus:9090/;
        }

        location /counter/ {
                include proxy_params;
                proxy_pass http://counter:8080/;
        }

        location /grafana/ {
                include proxy_params;
                proxy_pass http://grafana:3000/;
        }

        location /sysstats/ {
                include uwsgi_params;
                uwsgi_param SCRIPT_NAME /sysstats;
                uwsgi_pass sysstats_frontend:3031;
        }

        # trailing / is significant - means redirect /phpsysinfo to /phpsysinfo/
        # phpsysinfo (the php bit) has to run on the host machine - even
        # sharing as many namespaces as docker allows isn't quite the same.
        # Gentoo doesn't have an nginx-unit ebuild yet, so we use nginx
        # proper on the host, which has one site/location - :40001 running
        # phpsysinfo (see below), which in turn fast_cgi passes to
        # host:9000 where php-fpm is listening to actually run the PHP.
        # NB: have to pass everything to fastcgi, not just PHP, becuase
        # it's on another machine so this nginx can't read that filesystem.
        # Alas php-fpm applies a blanket text/html mime, so styles etc
        # don't work. Could maybe fix fpm but actually this is nasty - this
        # machine has to know where on the disk the other machine stores
        # its files. Seems fpm is too basic to serve a web app; it's just a
        # cgi process manager. Need an nginx or something on the other end
        # (like unit is).
        location /phpsysinfo/ {
                include proxy_params;
                # Trailing / causes matched prefix (/phpsysinfo) to be
                # dropped, as that's all the host's nginx serves for now.
                # In future it might have to serve more apps, but the idea
                # is one nginx (ideallly, unit) per app
                proxy_pass http://host:40001/;

                ## This will pass directly to php-fpm, which works for
                #interpreting and serving php and does hoof the static
                #files (css, js, etc) off the disk, but doesn't set their
                #mimetype (and is presubaly very slow etc). Really needs a
                #real http server infront of it (one with access to that
                #host's fs to be able to serve the static stuff).
                #nginx-unit does this but isn't available for gentoo.
                ###root /var/www/localhost/htdocs/;
                ##### this is the upstream fastcgi_params with one extra var to set the script file to the above root plus the Target Resource
                ###include fastcgi.conf;
                ###fastcgi_index index.php;
                #### missing trailing / is significant - causes the location prefix matched not to be dropped
                ###fastcgi_pass host:9000;
        }
}
